specify package_ext:
- before: |
    -- Do not try to check all the entries in unextended package,
    -- because they naturally change as modules are loaded.
    coreapis = { "config", "cpath", "loaders", "loadlib", "preload",
                 "searchers", "searchpath", "seeall" }
    newapis  = { "dirsep", "pathsep", "path_mark",  "execdir", "igmark" }

    -- `require "std"` side-effects all kinds of global state, clean up
    -- at least the parts we care about in case another test already
    -- did a `require "std"` -- which would otherwise leak out here!
    saved_global_state = {}
    for _, api in ipairs (newapis) do
      saved_global_state[api] = package[api]
      package[api] = nil
    end

    -- Store addresses of core functions in pristine (as far as possible)
    -- state.
    unextended = {}
    for _, api in ipairs (coreapis) do
      unextended[api] = package[api]
    end

    pkgx = require "package_ext"

- after: |
    -- Undo side-effects of before block above.
    for k, v in pairs (saved_global_state) do
      package[k] = v
    end

- context when loaded directly:
  - "it splits package.config up":
      expect (string.format ("%s\n%s\n%s\n%s\n%s\n",
              pkgx.dirsep, pkgx.pathsep, pkgx.path_mark, pkgx.execdir, pkgx.igmark)
      ).should_contain (package.config)
  - it does not perturb the system package module:
      for _, api in ipairs (newapis) do
        expect (package[api]).should_be (nil)
  - it does not contain any other access points:
      for _, api in ipairs (coreapis) do
        expect (pkgx[api]).should_be (nil)
      end

- context when loaded via the std module:
  - before:
      require "std"

  - "it splits package.config up":
      expect (string.format ("%s\n%s\n%s\n%s\n%s\n",
              package.dirsep, package.pathsep, package.path_mark, package.execdir, package.igmark)
      ).should_contain (package.config)
  - it injects the exteded package table:
      for _, api in ipairs (newapis) do
        expect (package[api]).should_be (pkgx[api])
      end
  - it does not override any other module access points:
      for _, api in ipairs (coreapis) do
        expect (package[api]).should_be (unextended[api])
      end
